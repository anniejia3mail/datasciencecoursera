install.packages(c("tidyverse", "dslabs"))
installed.packages(
)
a
a <-1
b <-1
c<- -1
a
b
c
print(a)
print(b)
print(c)
ls()
?log
args(log)
?"="
?"+"
help(">")
help("ls")
help("log")
log4(1024)
help(log)
log(1024, base=4)
install.packages(dslabs)
install.packages("dslabs")
library(dslabs)
data("movielens")
str(dslabs)
str(movielens)
class(title)
class("title")
nlevels(movielens$genres)
class("genres")
class(genres)
install.packages(dslabs)
install.packages("dslabs")
library(dslabs)
data(murders)
class(murders)
str(murders)
names(murders)
length(murders$population)
x <-(31,4,15,92,65)
x <- c(31,4,15,92,65)
sort(x)
order(x)
orderofx <- order(x)
orderofx
orderoftotalmurders <- orderofx
orderoftotalmurders <- order(murders$total)
murders$abb(orderoftotalmurders)
murders$abb[orderoftotalmurders]
murders$abb[order(murders$total)]
install.packages("dslabs")
data("murders")
data(murders)
install.packages("dslabs", "tidyverse"")
library(dslabs)
data("murders")
data(murders)
install.packages("dslabs", "tidyverse"")
library(dslabs)
data(murders)
install.packages("dslabs", "tidyverse"")
library(dslabs)
data(murders)
str(murders)
help(=)
install.packages("dslabs", "tidyverse"")
library(dslabs)
data(murders)
str(murders)
help(=)
help("=")
install.packages("dslabs")
library(dslabs)
compute_s_n <- function (n) {}
compute_s_n <- function (n) {x <-1:n sum(x)}
library(dslabs)
compute_s_n(3)
compute_s_n(3
)
compute_s(3
)
interestedin <- function(n) {
x <- 1:n
sum(x)
}
print(interestedin(3))
print(interestedin(100))
print(interestedin(2017))
print(i
)
print(i)
print(x)
print(a)
for(i in 1:5) {
print(i)
}
s_n
print9s_n)
print(s_n)
s_n <- c(length=m)
m <- 25
s_n <- c(length=m)
s_n
s_n <- vector(length=m)
}
s_n[n] <- interestedin(n)
for(i in 1:5) {
print(i)
}
for(n in 1:m) {
s_n[n] <- interestedin(n)
print(s_n)
}
s_n
s_n
s_n[n] <- interestedin(n)
for(n in 1:m) {print(sum(1:m))}
for(n in 1:m) {print(sum(1:n))}
library(swirl)
ls()
rm(list=ls())
swirt()
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
arge(remainder)
args(remainder)
submit()
submit()
play()
my_mean <- function(my_vector) {themeanis <- sum(my_vector)/length(my_vector)}
my_mean <- function(my_vector) {themeanis <- sum(my_vector)/length(my_vector) my_mean}
submit()
swirl()
play()
my_mean <- function(my_vector) {  themeanis <- mean(my_vector)themeanis }
q()
library(swirl)
ls()
rm(list=ls())
swirl()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
play()
cls_vect
nxt()
sum(flags$orange(
sum(flags$orange)
{}
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <-flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6)
unique(c(3,4,5,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <-lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
main()
play()
dim()
dim(flags)
head(flags)
str(flags)
summary(flags)
viewinfo(flags)
viewinfo()
nxt()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)'
tapply(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
info()
help()
info()
main()
tapply(flags$animate, mean)
tapply(flags$animate, flags$landmass, mean)
q()
q()
q()
swirl()
exit()
quit()
q()
q()
q()
q()
q()
q()
q()
q()
play()
info()
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags%population, flags%landmass, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?pois
?rpois
rpois(5,10)
my_pois <- rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
dl
d1
d2<- as.Date("1969-01-01")
unclass()
unclass(d2)
t1 <- Sys.time()
unclass(t1)
class(t1)
t1
class(t1)
unclass(t1)
t2 <- as.POSIXl(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
tw$min
t1$min
t2$min
weekdays(d1)
month(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
>strptime
?strptime
strptime(t3, "%B %d, $Y $H:%M")
strptime(t3, "%B %d, %Y %H:%M")
<- t4strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
play()
plot(cars)
nst()
nxt()
plot(x=cars$dist, y=cars$speed)
plot(x="Speed", y=cars$dist)
plot(x,y,"Speed", "Distance", log)
plot(x,y, xlab = "Speed", ylab = "Distance", log = FALSE)
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Distance", log = FALSE)
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Distance")
plot(cars$speed, cars$dist, xlab = "Speed")
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars$speed, cars$dist, ylab = "Stopping Distance")
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars$speed, cars$dist, main = "My Plot")
plot(cars$speed, cars$dist, ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch=2)
library(mtcars)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
play()
data(mtcars)
head(mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
q()
sum
?sum
assign("results2, (2+4-1)*10")
assign("results2", (2+4-1)*10)
results <- (2+4-1)&10
results == results2
results <- (2+4-1)*10
results == results2
results == results2
typeof(product)
typeof(product)
#character variable
product <- "cookie"
product
typeof(product)
#double and integer variables
quantity <- 2
quantity
price <- 3
price
typeof(quantity)
typeof(price)
1 + 1
num [1:4, 1:2] 1 2 3 4 5 6 7 8
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 4, ncol = 2)
View(example)
setwd("~/Annie 2020-2021/Academics/Coursera - Data Scientist's Toolbox")
setwd("~/Annie 2020-2021/Academics/Coursera - Data Scientist's Toolbox")
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 4, ncol = 2)
iris
install.packages("ggplot2")
remove.packages("ggplot2")
install.packages("ggplot2")
help(package = "ggplot2")
install.packages("devtools")
library(devtools)
library(usethis)
library(devtools)
detach("package:devtools", unload = TRUE)
install.packages("KernSmooth")
library(KernSmooth)
